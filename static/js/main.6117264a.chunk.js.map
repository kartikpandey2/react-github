{"version":3,"sources":["logo.svg","Components/SearchBar.js","Components/Header.js","App.js","Components/ResultPanel.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","userName","target","value","handleSubmit","console","log","state","searchButton","getData","push","axios","get","Promise","all","then","result","reposData","data","userData","toast","warn","react_default","a","createElement","mdbreact","label","onChange","group","type","color","onClick","icon","SearchBar_Avatar","SearchBar_PanelBoard","hideProgressBar","newestOnTop","autoClose","Component","PanelBoard","repos","map","repo","SearchBar_ResultPanel","id","key","name","description","lang","language","forks","forks_count","clone_url","branch","default_branch","dLink","html_url","ResultPanel","url","zip","copyToClipboard","textField","document","innerText","body","appendChild","select","execCommand","remove","_this3","title","href","className","size","Avatar","avatar","src","avatar_url","Header","logo","alt","App","Components_Header","SearchBar_SearchBar","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6117264a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { Button, Input, Fa } from 'mdbreact';\r\nimport { Card, CardBody, CardTitle, CardText, ToastContainer, toast } from 'mdbreact';\r\n\r\nexport default class SearchBar extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            userName: '',\r\n            reposData: [],\r\n            userData: [],\r\n            searchButton: 'Search',\r\n        }\r\n        \r\n    }\r\n    handleChange = (e) =>{\r\n        this.setState({\r\n            userName: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        console.log(\"Submitted\");\r\n        if(this.state.userName === ''){\r\n            toast.warn('Please enter a username');\r\n            return;\r\n        }\r\n        this.setState({\r\n            searchButton: 'Searching...'\r\n        });\r\n        let getData = [];\r\n        getData.push(axios.get('https://api.github.com/users/'+this.state.userName+'/repos'));\r\n        getData.push(axios.get('https://api.github.com/users/'+this.state.userName));\r\n\r\n        Promise.all(getData)\r\n        .then(result=>{\r\n            this.setState({\r\n                reposData: result[0].data,\r\n                userData: result[1].data,\r\n                searchButton: 'Search'\r\n            });\r\n            console.log(this.state)\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Input label=\"Type any Github Username\" onChange={this.handleChange} group type=\"text\" />\r\n                {/* <Input label=\"Type your password\" icon=\"lock\" group type=\"password\" /> */}\r\n                <Button color=\"danger\" onClick={this.handleSubmit} >{this.state.searchButton} <Fa icon=\"search\" /></Button>\r\n\r\n                <Avatar\r\n                    data={this.state.userData}\r\n                />\r\n                <PanelBoard \r\n                    data={this.state.reposData}\r\n                />\r\n                <ToastContainer\r\n                hideProgressBar={true}\r\n                newestOnTop={true}\r\n                autoClose={2000}\r\n                />\r\n            </div>\r\n           \r\n        );\r\n    }\r\n}\r\n\r\nclass PanelBoard extends Component {\r\n  \r\n    render(){\r\n        const repos = this.props.data.map((repo) => (\r\n            \r\n            <ResultPanel\r\n              id={repo.id}\r\n              key={repo.id}\r\n              name={repo.name}\r\n              description={repo.description}\r\n              lang={repo.language}\r\n              forks={repo.forks_count}\r\n              clone_url={repo.clone_url}\r\n              branch={repo.default_branch}\r\n              dLink={repo.html_url}\r\n            />\r\n            // console.log(repo.name)\r\n          ));\r\n\r\n          return(\r\n                <div>\r\n                    {repos}\r\n                </div>\r\n          );\r\n    }\r\n}\r\n\r\nclass ResultPanel extends Component {\r\n    state = {\r\n        url: '/archive/',\r\n        zip: '.zip'\r\n    }\r\n    copyToClipboard = (data) => {\r\n        let textField = document.createElement('textarea')\r\n        textField.innerText = data;\r\n        document.body.appendChild(textField)\r\n        textField.select()\r\n        document.execCommand('copy')\r\n        textField.remove()\r\n        // alert('Copied to Clipboard');\r\n        toast.warn('URL copied to clipboard!');\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>\r\n                            <a \r\n                            title=\"View on Github\" \r\n                            href={this.props.dLink} target=\"_blank\"> {this.props.name} <span><Fa icon=\"github\" title=\"View on Github\"/></span>\r\n                            </a>  \r\n                            {/* <Button color=\"primary pull-right\">Copy clone link</Button>  */}\r\n                            {/* <span className=\"pull-right\" ><Fa title=\"Download as zip\" icon=\"download\" href={this.props.dLink + this.state.url + this.props.branch + this.state.zip } /></span> */}\r\n                            \r\n                            <span className=\"pull-left\" ><Fa title=\"Copy Clone link\" icon=\"file\" onClick={() => this.copyToClipboard(this.props.clone_url)} /></span>\r\n\r\n                            <Button title=\"Download as zip\" size=\"sm\" color=\"primary pull-right\" href={this.props.dLink + this.state.url + this.props.branch + this.state.zip }><Fa title=\"Download as zip\" icon=\"download\" /></Button> \r\n                            \r\n                        </CardTitle>\r\n                        <CardText>{this.props.description}</CardText>\r\n                        <CardText><span className=\"pull-left\">Language: {this.props.lang} </span></CardText>\r\n                        <CardText><span className=\"pull-right\">Forks: {this.props.forks} </span></CardText>\r\n                       \r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n           \r\n        );\r\n    }\r\n}\r\n\r\nclass Avatar extends Component {\r\n    render() {\r\n        const avatar= this.props.data ? this.props.data : null;\r\n\r\n        return (\r\n            avatar && \r\n            <div>\r\n                <img className=\"gitAvatar\" src={avatar.avatar_url} />\r\n                <div><strong>{avatar.name}</strong></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// export default Timer;","import React, { Component } from 'react';\r\nimport logo from '../logo.svg';\r\n\r\nclass Header extends Component {\r\n    render(){\r\n        return(\r\n        <header className=\"App-header\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <h1 className=\"App-title\">Welcome to Github Repo App</h1>\r\n        </header>\r\n           \r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport SearchBar from './Components/SearchBar'\nimport Header from './Components/Header'\nimport './App.css';\n\nimport ResultPanel from './Components/ResultPanel';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      data: {}\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-2\"></div>\n          <div className=\"col-md-8\">\n              <SearchBar />\n          </div>\n        </div>\n      </div>\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\n\r\nimport { Button, Card, CardBody, CardTitle, CardText } from 'mdbreact';\r\n\r\nexport default class ResultPanel extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Repo name  \r\n                            <Button color=\"primary pull-right\">Copy clone link</Button> \r\n                            <Button color=\"primary pull-right\">Download as zip</Button> \r\n                            \r\n                        </CardTitle>\r\n                        <CardText>About repo content.</CardText>\r\n                       \r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n           \r\n        );\r\n    }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}